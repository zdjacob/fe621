% Reproduces Figures in Bruce Bartlett's paper "Hedging Under SABR Model"
% Wilmott Magazine
% Requires the beta parameter as given
% Estimates the parameters: rho, and vol
% Obtains the alpha parameter through ATM volatility
clc; clear;

% Input the market vols and strikes from Figure 3.3
V = [19.5 17.8 17.2 17.5 18.5]./100;
k = [ 2.7  3.2  3.7  4.2  4.7]./100;

% Create a fine grid of strikes for the SABR vols
K = [k(1)-0.0005:.0001:k(end)];

% Input the Maturity and ATM Strike, ATM Vol
T = 0.25;
F = 0.03701;
ATMvol = .172;

% Define the starting values and options for fminsearch
start = [.3, 0, .3];
options = optimset('MaxFunEvals', 1e5, 'TolFun', 1e-8, 'TolX', 1e-10);

% Estimate the parameters alpha, rho, and v using beta=0, beta=1, beta=0.5
b = [.25 .5 .75 1];
B = length(b);
for i=1:B;
	[param, feval(i)] = fminsearch(@(par)EstimateRhoAndVol(par, k, V, ATMvol, F, T, b(i)), start, options);
	r(i) = param(1);
	v(i) = param(2);
	a(i) = findAlpha(F,F,T,ATMvol,b(i),r(i),v(i));
	for j=1:length(K);
		Vol(i,j) = SABRvol(a(i), b(i), r(i), v(i), F, K(j), T);
	end
	clear param;
end

% Report the Fitted Parameters and the value of the objective function
Results = dataset({a', 'alpha'}, {b', 'beta'}, {r', 'rho'}, {feval', 'SSE'})

% Plot the results
plot(k,V,'kx',K,Vol(1,:),K,Vol(2,:),K,Vol(3,:),K,Vol(4,:))
Legend('Market Vols', ['beta = ' num2str(b(1))], ['beta = ' num2str(b(2))],...
     ['beta = ' num2str(b(3))], ['beta = ' num2str(b(4))])

%% Original SABR Greek dvdF

for i=1:B
    for j=1:length(K)
            dvdF(i,j) = ...
              1/F*v(i)/log(-1/(r(i) - 1)*((1/a(i)^2*v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i))...
            - 2/a(i)*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i)) + 1)^(1/2)...
            - r(i) + 1/a(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i))))*(T*(1/24*a(i)^2*(b(i) - 1)^2*(F*K(j))^(b(i) - 1)...
            - v(i)^2*(1/8*r(i)^2 - 1/12) + 1/4*a(i)*b(i)*r(i)*v(i)*(F*K(j))^(1/2*b(i) - 1/2)) + 1)/(1/24*log(F/K(j))^2*(b(i) - 1)^2 ...
            + 1/1920*log(F/K(j))^4*(b(i) - 1)^4 + 1) + T*v(i)/log(-1/(r(i) - 1)*((1/a(i)^2*v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i))...
            - 2/a(i)*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i)) + 1)^(1/2)...
            - r(i) + 1/a(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i))))*log(F/K(j))*(1/24*K(j)*a(i)^2*(b(i) - 1)^3*(F*K(j))^(b(i) - 2)...
            + 1/4*K(j)*a(i)*b(i)*r(i)*v(i)*(1/2*b(i) - 1/2)*(F*K(j))^(1/2*b(i) - 3/2))/(1/24*log(F/K(j))^2*(b(i) - 1)^2 ...
            + 1/1920*log(F/K(j))^4*(b(i) - 1)^4 + 1) - v(i)/log(-1/(r(i) - 1)*((1/a(i)^2*v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i))...
            - 2/a(i)*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i)) + 1)^(1/2) - r(i)...
            + 1/a(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i))))*log(F/K(j))*(T*(1/24*a(i)^2*(b(i) - 1)^2*(F*K(j))^(b(i) - 1)...
            - v(i)^2*(1/8*r(i)^2 - 1/12) + 1/4*a(i)*b(i)*r(i)*v(i)*(F*K(j))^(1/2*b(i) - 1/2)) + 1)*(1/480/F*log(F/K(j))^3*(b(i) - 1)^4 ...
            + 1/12/F*log(F/K(j))*(b(i) - 1)^2)/(1/24*log(F/K(j))^2*(b(i) - 1)^2 + 1/1920*log(F/K(j))^4*(b(i) - 1)^4 + 1)^2 ...
            + v(i)/log(-1/(r(i) - 1)*((1/a(i)^2*v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i)) - 2/a(i)*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i)) + 1)^(1/2)...
            - r(i) + 1/a(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i))))^2*log(F/K(j))*(T*(1/24*a(i)^2*(b(i) - 1)^2*(F*K(j))^(b(i) - 1)...
            - v(i)^2*(1/8*r(i)^2 - 1/12) + 1/4*a(i)*b(i)*r(i)*v(i)*(F*K(j))^(1/2*b(i) - 1/2)) + 1)*(1/2/(1/a(i)^2*v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i))...
            - 2/a(i)*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i)) + 1)^(1/2)*(2/F/a(i)*r(i)*v(i)*(F*K(j))^(1/2 - 1/2*b(i))...
            - 2/F/a(i)^2*v(i)^2*log(F/K(j))*(F*K(j))^(1 - b(i)) + K(j)/a(i)^2*v(i)^2*log(F/K(j))^2*(b(i) - 1)/(F*K(j))^b(i)...
            - 2*K(j)/a(i)*r(i)*v(i)*log(F/K(j))*(1/2*b(i) - 1/2)/(F*K(j))^(1/2*b(i) + 1/2)) - 1/F/a(i)*v(i)*(F*K(j))^(1/2 - 1/2*b(i))...
            + K(j)/a(i)*v(i)*log(F/K(j))*(1/2*b(i) - 1/2)/(F*K(j))^(1/2*b(i) + 1/2))/((1/a(i)^2*v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i))...
            - 2/a(i)*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i)) + 1)^(1/2)...
            - r(i) + 1/a(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - 1/2*b(i)))/(1/24*log(F/K(j))^2*(b(i) - 1)^2 ...
            + 1/1920*log(F/K(j))^4*(b(i) - 1)^4 + 1);
    end;
end;


%% Updated SABR Greek requires dv/da
for i=1:B
    for j=1:length(K)
        dvda(i,j) = ...
          (T*v(i)*log(F/K(j))*((a(i)*(b(i) - 1)^2*(F*K(j))^(b(i) - 1))/12 ...
        + (b(i)*r(i)*v(i)*(F*K(j))^(b(i)/2 - 1/2))/4))/(log(-(((v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i)))/a(i)^2 ...
        - (2*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - b(i)/2))/a(i) + 1)^(1/2) - r(i)...
        + (v(i)*log(F/K(j))*(F*K(j))^(1/2 - b(i)/2))/a(i))/(r(i) - 1))*((log(F/K(j))^2*(b(i) - 1)^2)/24 ...
        + (log(F/K(j))^4*(b(i) - 1)^4)/1920 + 1)) + (v(i)*log(F/K(j))*(T*((a(i)^2*(b(i) - 1)^2*(F*K(j))^(b(i) - 1))/24 ...
        - v(i)^2*(r(i)^2/8 - 1/12) + (a(i)*b(i)*r(i)*v(i)*(F*K(j))^(b(i)/2 - 1/2))/4) + 1)*(((2*v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i)))/a(i)^3 ...
        - (2*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - b(i)/2))/a(i)^2)/(2*((v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i)))/a(i)^2 ...
        - (2*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - b(i)/2))/a(i) + 1)^(1/2))...
        + (v(i)*log(F/K(j))*(F*K(j))^(1/2 - b(i)/2))/a(i)^2))/(log(-(((v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i)))/a(i)^2 ...
        - (2*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - b(i)/2))/a(i) + 1)^(1/2) - r(i)...
        + (v(i)*log(F/K(j))*(F*K(j))^(1/2 - b(i)/2))/a(i))/(r(i) - 1))^2*(((v(i)^2*log(F/K(j))^2*(F*K(j))^(1 - b(i)))/a(i)^2 ...
        - (2*r(i)*v(i)*log(F/K(j))*(F*K(j))^(1/2 - b(i)/2))/a(i) + 1)^(1/2) - r(i)...
        + (v(i)*log(F/K(j))*(F*K(j))^(1/2 - b(i)/2))/a(i))*((log(F/K(j))^2*(b(i) - 1)^2)/24 ...
        + (log(F/K(j))^4*(b(i) - 1)^4)/1920 + 1));
        dvdFnew(i,j) = dvdF(i,j) + (r(i)*v(i)/F^b(i))*dvda(i,j);
    end;
end;

%% Plot original SABR Greek dv/dF and the updated Greek
subplot(2,1,1)
plot(K,dvdF(1,:),K,dvdF(2,:),K,dvdF(3,:),K,dvdF(4,:))
axis([0.025 0.05 -6 4])
Legend(['beta = ' num2str(b(1))], ['beta = ' num2str(b(2))],...
       ['beta = ' num2str(b(3))], ['beta = ' num2str(b(4))])

subplot(2,1,2)
plot(K,dvdFnew(1,:),K,dvdFnew(2,:),K,dvdFnew(3,:),K,dvdFnew(4,:))
axis([0.025 0.05 -6 4])
Legend(['beta = ' num2str(b(1))], ['beta = ' num2str(b(2))],...
       ['beta = ' num2str(b(3))], ['beta = ' num2str(b(4))])
   
   